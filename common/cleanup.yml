.for_cleanup:
  stage: cleanup
  extends:
    - .needs_init_and_scanners
    - .allow_failure
    - .tags


.needs_init_and_scanners:
  needs: 
    - job: scan:trufflehog3
    - job: scan:gitleaks
    - job: init
      artifacts: true
    

.before_script_patcher:
  before_script:
    - export $(xargs < variables.env)


.after_script_patcher:
  after_script:
    - python3 /simplifier/dependency-task-simplifier.py


auto-falser:
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/toolset:latest"
  script:
    - python3 /falser/falser.py
  extends: 
    - .for_cleanup


patch-libraries:pip:
  variables:
    DD_ATTACHMENT_FILE_NAME: 'requirements.txt'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/ws-patcher:latest"
  script:
    - python3 -m pip_audit -r requirements.txt --fix  
  extends: 
    - .for_cleanup
    - .before_script_patcher
    - .after_script_patcher
  rules:
    - if: '$SEC_IMAGE_SCAN_ENABLE == "true"'
      exists:
        - 'requirements.txt'
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - requirements.txt
    when: always


patch-libraries:npm:
  variables:
    DD_ATTACHMENT_FILE_NAME: 'package.json'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/ws-patcher:latest"
  script:
    - npm install
    - npm audit fix --force
  extends: 
    - .for_cleanup
    - .before_script_patcher
    - .after_script_patcher
  rules:
    - if: '$SEC_IMAGE_SCAN_ENABLE == "true"'
      exists:
        - 'package.json'
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - package.json
    when: always


patch-libraries:go:
  variables:
    DD_ATTACHMENT_FILE_NAME: 'go.mod'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/ws-patcher:latest"
  script:
    - go get -u && go mod tidy
  extends: 
    - .for_cleanup
    - .before_script_patcher
    - .after_script_patcher
  rules:
    - if: '$SEC_IMAGE_SCAN_ENABLE == "true"'
      exists:
        - 'go.mod'
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - go.mod
    when: always

