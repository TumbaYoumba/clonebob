# SETTINGS

# For all stages below
.for_code_scan:
  stage: code-scan
  extends:
    - .dd-upload-report
    - .needs_init
    - .allow_failure
    - .tags

# Only for mobile scanners, that scan code
.mobile_sast:
  rules:
    - if: '$SEC_MOBILE_ENABLE == "true"'

# For sast and code-related scanners (Legacy. Will be deleted soon)
.sast:
  rules:
    - if: '$SEC_SAST_ENABLE == "true"'

# Language rules

.docker_rules:
  rules:
    - if: '$SEC_DOCKER == "true"'
    - exists:
      - '**/Dockerfile'

.golang_rules:
  rules:
    - if: '$SEC_GO == "true"'
    - exists:
      - '**/*.go'

.grep_rules:
  rules:
    - if: '$SEC_GREP == "true"'
    - exists:
      - '**/*.go'
      - '**/*.php'
      - '**/*.java'
      - '**/*.scala'
      - '**/*.kt'
      - '**/*.groovy'
      - '**/*.js'
      - '**/*.py'

.iac_rules:
  rules:
    - if: '$SEC_IAC == "true"'
    - exists:
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.tf'
      - '**/*.json'
      - '**/*.template'

.js_rules:
  rules:
    - if: '$SEC_JS == "true"'
    - exists:
      - '**/*.js'

.java_rules:
  rules:
    - if: '$SEC_JAVA == "true"'
    - exists:
      - '**/*.java'
      - '**/*.scala'
      - '**/*.kt'
      - '**/*.groovy'

.python_rules:
  rules:
    - if: '$SEC_PYTHON == "true"'
    - exists:
      - '**/*.py'

.php_rules:
  rules:
    - if: '$SEC_PHP == "true"'
    - exists:
      - '**/*.php'
      - '**/*.pht'

.ruby_rules:
  rules:
    - if: '$SEC_RUBY == "true"'
    - exists:
      - '**/*.rb'



# INFRA

scan:hadolint:
  variables:
    DD_SCAN_TYPE: 'Hadolint Dockerfile check'
    DD_REPORT_FILE_NAME: 'hadolint.json'
    DD_GROUP_BY: 'file_path'
    SEC_PATH_TO_DOCKERFILE_FOLDER: $SEC_CODE_FOLDER
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/hadolint:$SEC_HADOLINT_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    # Check all Dockerfiles
    - find . -name "Dockerfile" -type f -exec hadolint --no-fail -f json {} > $DD_REPORT_FILE_NAME \;
    # prepare the report for DefectDojo (We need to split many reports by comma)
    - sed -i 's/\[\]//g' $DD_REPORT_FILE_NAME
    - sed -i ':a;N;$!ba;s/\n//g' $DD_REPORT_FILE_NAME
    - sed -i 's/}\]\[{/},{/g' $DD_REPORT_FILE_NAME
    # This is the script for only one Dockerfile (we think it's not required anymore, but maybe it would be interesting for you)
    # - hadolint -f json ./$SEC_PATH_TO_DOCKERFILE_FOLDER/Dockerfile > $DD_REPORT_FILE_NAME || true
  extends: 
    - .for_code_scan
    - .docker_rules

scan:checkov:
  variables:
    DD_SCAN_TYPE: 'Checkov Scan'
    DD_REPORT_FILE_NAME: 'checkov.json'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/checkov:$SEC_CHECKOV_VER"
  script:
    - checkov -d ./$SEC_CODE_FOLDER -s -o json > $DD_REPORT_FILE_NAME
  extends: 
    - .for_code_scan
    - .iac_rules

# SAST

sast:py:bandit:
  variables:
    DD_SCAN_TYPE: 'Bandit Scan'
    DD_REPORT_FILE_NAME: 'bandit.json'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/bandit:$SEC_BANDIT_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - bandit -ll -ii -r ./$SEC_CODE_FOLDER -f json -o $DD_REPORT_FILE_NAME || true
  extends: 
    - .for_code_scan
    - .python_rules

sast:php:phpcs-security-audit:
  variables:
    DD_SCAN_TYPE: 'PHP Security Audit v2'
    DD_REPORT_FILE_NAME: 'phpcs.json'
    SEC_PHPCS_STANDARD: '/tmp/vendor/pheromone/phpcs-security-audit/example_base_ruleset.xml'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/phpcs-security-audit:$SEC_PHPCS_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - /tmp/vendor/bin/phpcs --extensions=php,inc,lib,module,info --standard=$SEC_PHPCS_STANDARD  --report=json --report-file=$DD_REPORT_FILE_NAME ./$SEC_CODE_FOLDER || true
  extends: 
    - .for_code_scan
    - .php_rules

sast:go:gosec:
  variables:
    DD_SCAN_TYPE: 'Gosec Scanner'
    DD_REPORT_FILE_NAME: 'gosec.json'
    DD_GROUP_BY: 'file_path'
    SEC_GOSEC_MINIMUM_SEVERITY: 'low'
    SEC_GOSEC_EXCLUDE: 'G102,G103,G104,G307'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/gosec:$SEC_GOSEC_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - gosec -fmt json -out $DD_REPORT_FILE_NAME -exclude=$SEC_GOSEC_EXCLUDE -severity=$SEC_GOSEC_MINIMUM_SEVERITY ./$SEC_CODE_FOLDER || true
    # G102: Bind to all interfaces
    # G103: Audit the use of unsafe block
    # G104: Audit errors not checked
    # G307: Deferring a method which returns an error
  extends: 
    - .for_code_scan
    - .php_rules

sast:js:retirejs:
  variables:
    DD_SCAN_TYPE: 'Retire.js Scan'
    DD_REPORT_FILE_NAME: 'retirejs.json'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/retirejs:$SEC_RETIREJS_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    # Fix dependencies by using npm install two times. Yes, this is how it works sometimes...
    # Just uncomment if required
    # - npm install || true
    - npm install || true
    - retire --outputformat json --outputpath $DD_REPORT_FILE_NAME --path ./$SEC_CODE_FOLDER  || true
  extends: 
    - .for_code_scan 
    - .js_rules

sast:js:eslint:
  variables:
    DD_SCAN_TYPE: 'ESLint Scan'
    DD_REPORT_FILE_NAME: 'eslint.json'
    DD_GROUP_BY: 'file_path'
    SEC_ESLINT_CONFIG_PATH: '/eslint/eslintrc-light.js'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/eslint:$SEC_ESLINT_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - eslint -c $SEC_ESLINT_CONFIG_PATH -o $DD_REPORT_FILE_NAME -f json ./$SEC_CODE_FOLDER || true
  extends: 
    - .for_code_scan
    - .js_rules

sast:ruby:brakeman:
  variables:
    DD_SCAN_TYPE: 'Brakeman Scan'
    DD_REPORT_FILE_NAME: 'brakeman.json'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/brakeman:$SEC_BRAKEMAN_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - brakeman -o $DD_REPORT_FILE_NAME ./$SEC_CODE_FOLDER || true
  extends: 
    - .for_code_scan
    - .ruby_rules

sast:java:spotbugs:
  variables:
    DD_SCAN_TYPE: 'GitLab SAST Report'
    # This scanner has it's own report creation logic: https://gitlab.com/gitlab-org/security-products/analyzers/common#how-to-use-the-analyzers
    DD_REPORT_FILE_NAME: 'gl-sast-report.json' 
    #CI_PROJECT_DIR: $SEC_CODE_FOLDER # FOR non-gitlab scm
    SECURE_LOG_LEVEL: "debug"
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/spotbugs:$SEC_SPOTBUGS_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - /analyzer run || true
  extends: 
    - .for_code_scan 
    - .java_rules

# Other languages/technologies
sast:grep:semgrep:
  variables:
    DD_SCAN_TYPE: 'Semgrep JSON Report'
    DD_REPORT_FILE_NAME: 'semgrep.json'
    DD_GROUP_BY: 'file_path'
    SEC_SEMGREP_CONFIG: 'p/ci'
    SEC_SEMGREP_EXCLUDE: '/tests'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/semgrep:$SEC_SEMGREP_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - semgrep --config $SEC_SEMGREP_CONFIG --exclude=$SEC_SEMGREP_EXCLUDE --json ./$SEC_CODE_FOLDER > $DD_REPORT_FILE_NAME || true
  extends: 
    - .for_code_scan 
    - .grep_rules

sast:grep:terrascan:
  variables:
    DD_SCAN_TYPE: 'Terrascan Scan'
    DD_REPORT_FILE_NAME: 'terrascan.json'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/terrascan:$SEC_TERRASCAN_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    # first, it should be updated
    - terrascan init 
    - terrascan scan ./$SEC_CODE_FOLDER -o json > $DD_REPORT_FILE_NAME || true
  extends: 
    - .for_code_scan 
    - .iac_rules

# Mobile SAST

sast:mobile:mobsfscan:
  variables:
    DD_SCAN_TYPE: 'Mobsfscan Scan'
    DD_REPORT_FILE_NAME: 'mobsfscan.json'
    DD_GROUP_BY: 'file_path'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/mobsfscan:$SEC_MOBSFSCAN_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - mobsfscan ./$SEC_CODE_FOLDER --json > $DD_REPORT_FILE_NAME || true
  extends: 
    - .mobile_sast
    - .for_code_scan


# Code dependencies

dep-scan:trivy:
  variables:
    DD_SCAN_TYPE: 'Trivy Scan'
    DD_REPORT_FILE_NAME: 'trivy-code.json'
    DD_GROUP_BY: 'component_name'
    IMAGE_TO_SCAN: "$CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_NAME"
    SEC_TRIVY_MINIMUM_SEVERITY: 'HIGH,CRITICAL'
  image: "$CI_REGISTRY/$SEC_PATH_TO_IMAGES/trivy:$SEC_TRIVY_VER"
  script:
    - echo "Scanning code with - $CI_REGISTRY_IMAGE"
    - trivy fs --output $DD_REPORT_FILE_NAME --security-checks vuln --format json --severity $SEC_TRIVY_MINIMUM_SEVERITY ./$SEC_CODE_FOLDER || true
  extends: 
    - .for_code_scan
